// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CenterStatus {
  pending
  rejected
  activated
}

enum TeacherStatus {
  active
  inactive
}



model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  password String
  email    String @unique
}

model Center {
  id        Int       @id @default(autoincrement())
  name      String
  document  String
  location  String
  regionId  Int
  image     String
  status    CenterStatus
  password  String
  email     String @unique
  region    Region   @relation(fields: [regionId], references: [id])
  teacher   Teacher[]
}

model Teacher {
  id          Int      @id @default(autoincrement())
  fullname    String
  email       String   @unique
  password    String
  phone       String
  sertificate String
  status      TeacherStatus
  image       String
  centerId    Int
  center      Center   @relation(fields: [centerId], references: [id])
  group       Group[]

  Result Result[]

  Group Group[] @relation("CheckerTeacher")
}

model Group {
  id            Int       @id @default(autoincrement())
  name          String
  teacherId     Int
  startTime     DateTime
  endTime       DateTime
  avarageScore  Float
  checkerTeacherId Int
  teacher       Teacher  @relation(fields: [teacherId], references: [id])
  checkerTeacher Teacher @relation("CheckerTeacher", fields: [checkerTeacherId], references: [id])
  student       Student[]
}

model Student {
  id       Int    @id @default(autoincrement())
  fullname String
  groupId  Int
  password String
  phone    String
  group    Group  @relation(fields: [groupId], references: [id])

  Exam Exam[]
}

model Exam {
  id              Int        @id @default(autoincrement())
  readingVariantId Int
  writingVariantId Int
  studentId       Int
  student         Student   @relation(fields: [studentId], references: [id])
  readingVariant  ReadingVariant @relation(fields: [readingVariantId], references: [id])
  writingVariant  WritingVariant @relation(fields: [writingVariantId], references: [id])

  Result Result[]
}

model Region {
  id        Int     @id @default(autoincrement())
  name      String
  centers   Center[]
}

model Result {
  id               Int     @id @default(autoincrement())
  examId           Int
  speakingScore    Int
  writingScore     Int
  listeningScore   Int
  readingScore     Int
  examenarTeacherId Int
  speakingComment  String
  writingComment   String
  exam             Exam    @relation(fields: [examId], references: [id])
  examenarTeacher  Teacher @relation(fields: [examenarTeacherId], references: [id])
}

model ReadingVariant {
  id       Int      @id @default(autoincrement())
  name     String
  readingBlok ReadingBlok[]
  exam      Exam[]
}

model ReadingBlok {
  id              Int             @id @default(autoincrement())
  blockName       String
  readingVariantId Int
  readingVariant  ReadingVariant @relation(fields: [readingVariantId], references: [id])
  readingQuestion ReadingQuestion[]
}

model ReadingQuestion {
  id           Int        @id @default(autoincrement())
  questionText String
  readingBlockId Int
  readingBlock  ReadingBlok @relation(fields: [readingBlockId], references: [id])
}

model WritingVariant {
  id       Int       @id @default(autoincrement())
  name     String
  writingBlok WritingBlok[]
  exam      Exam[]
}

model WritingBlok {
  id             Int      @id @default(autoincrement())
  blockName      String
  writingVariantId Int
  description    String
  image          String
  writingVariant WritingVariant @relation(fields: [writingVariantId], references: [id])
}
